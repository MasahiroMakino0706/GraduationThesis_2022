卒論研究の方向性の提案

2022年1月28日 大堀 淳

研究計画

3 文節に分ける

１．助詞が続く場合は，その助詞の情報を含むものを返す．
２．助詞が続かなければ，jumanppの情報を返す．

型の例：

datatype bunsetu 
  = 名詞は of {名詞 : string, ....}
  | 名詞が of {名詞 : string, ....}
  | 名詞を of {名詞 : string, ...}
  | 名詞の of {名詞 : string, ...}
  | 名詞に of {名詞 : string, ...}
  | 名詞へ of {名詞 : string, ...}
  | 名詞 of {名詞 : string, ...}
  | 形容詞 of {形容詞 : string}
  | 動詞 of {動詞 : string, ...} 

象 は 鼻 が 長い を分節別け
 [
  名詞は {名詞 = "象", ....}
  名詞が {名詞 = "鼻", ....}  
  形容詞 {形容詞 = "長い", ....}  
 ]

次に，部分的な文表現に変換

  名詞は {名詞 = "象", ....} 
を以下に変換：
[
  Dynamic.dynamic
   {
     種類 = 形容詞文,
     述語 = {主格 = {名詞 = "象"}},
     堤題 = {名詞 = "象"}
   },
  Dynamic.dynamic
   {
     種類 = 形容詞文,
     述語 = {主格 = {の格 = "象"}},
     堤題 = {名詞 = "象"}
   },
  Dynamic.dynamic
   {
     種類 = 動詞文,
     述語 = {主格 = {名詞 = "象"}},
     堤題 = {名詞 = "象"}
   },
  Dynamic.dynamic
   {
     種類 = 動詞文,
     述語 = {主格 = {の格 = "象"}},
     堤題 = {名詞 = "象"}
   }
]


４．各種の文（動詞文，名詞文・形容詞文，名詞文・準詞文）毎に，文を表す
    レコード構造を定義．
５．各文節に対して，それが果たす文の中の役割を表現すうる  
    不完全な文表現レコードのリストを構成．
６．自然結合を用いて，全ての文節をJOIN. 結果得られるものが，構文後続（意味構造）

これらの具体的な方法案（未発表の研究のアイデアであるので，取扱は慎重に）：

「象は」を含む以下の文を考える．

「像は鼻が長い」
{
  種類 = 形容詞文,
  述語 = {形容詞 = "長い", 主格 = {名詞 = "鼻",の格 = "象"}},
  堤題 = {名詞 = "象"}
}  

「像は速く走る」
{
  種類 = 動詞文,
  述語 = {動詞 = "走る", 主格 = {名詞 = "象"}, 連用修飾 = "速く"},
  堤題 = {名詞 = "象"}
}  

これらの中で「象は」は，以下の情報を表現

「象は」:
val zouHa1 =
{
  種類 = 形容詞文,
  述語 = {主格 = {の格 = "象"}},
  堤題 = {名詞 = "象"}
}  
val zouHa2 =
{
  種類 = 形容詞文,
  述語 = {主格 = {名詞 = "象"}},
  堤題 = {名詞 = "象"}
}  
val zouHa3 =
{
  種類 = 動詞文,
  述語 = {主格 = {名詞 = "象"}},
  堤題 = {名詞 = "象"}
}  
val zouHa4 =
{
  種類 = 動詞文,
  述語 = {主格 = {の格 = "象"}},
  堤題 = {名詞 = "象"}
}  


「鼻が」：
val hanaGa1 = 
{
  種類 = 形容詞文,
  述語 = {主格 = {名詞 = "鼻"}}
}  
val hanaGa2 = 
{
  種類 = 動詞文,
  述語 = {主格 = {名詞 = "鼻"}}
}  

「長い」
val nagai1 =
{
  種類 = 形容詞文,
  述語 = {形容詞 = "長い"}
}  

「速く」
val hayaku1 =
{
  種類 = 動詞文,
  述語 = {連用修飾 = "速く"}
}  

「走る」
val hashiru1 =
{
  種類 = 動詞文,
  述語 = {動詞 = "走る"}
}  

それぞれの文節を，可能な表現のリストで表現．ただし，型が異なるレコードは
同一のリストにいれることはできないので，dynamic型を用いる．

val zouHa = [Dynamic.dynamic zouHa1, Dynamic.dynamic zouHa2];
val hanaGa = [Dynamic.dynamic hanaGa1, Dynamic.dynamic hanaGa2];
val nagai = [Dynamic.dynamic nagai]
val hayaku = [Dynamic.dynamic hayaku1]
val hashiru = [Dynamic.dynamic hashiru1]


